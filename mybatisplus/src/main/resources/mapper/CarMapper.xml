<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mybatisplus.mapper.CarMapper">
    <sql id="carIncludeSql2">id, car_num as carNum, brand, guide_price as guidePrice, produce_time as produceTime, car_type as carType</sql>
    <!-- 12.7 sql标签与include标签-->
    <select id="selectSqlInclude2"  resultType="Car">
        SELECT <include refid="carIncludeSql2"></include>
        FROM t_car
    </select>

    <resultMap id="ClazzAndStudentsResultMap" type="Car">
        <id property="id" column="id"/>
        <result property="carNum" column="car_num"/>
        <result property="brand" column="brand"/>
        <result property="guidePrice" column="guide_price"/>
        <result property="produceTime" column="produce_time"/>
        <result property="carType" column="car_type"/>
    </resultMap>

    <!--它可以自动去掉前面多余的and，不可以自动去掉后面多余的and-->
    <!-- @Param("brand") String brand, @Param("guidePrice") Double guidePrice, @Param("carType") String carType-->
    <select id="selectByMultiCondition" resultMap="ClazzAndStudentsResultMap">
        SELECT *
        FROM t_car
        <where>
            <if test="carType!=null and carType!=''">
                car_type = #{carType}
            </if>
            <if test="guidePrice!=null and guidePrice!=''">
                and guide_price >= #{guidePrice}
            </if>
            <if test="brand!=null and brand!=''">
                and brand like "%${brand}%"
            </if>
        </where>
        ORDER BY guide_price DESC
    </select>
    <!--  12.3 trim标签 prefix：在trim标签中的语句前添加内容
      * suffix：在trim标签中的语句后添加内容
      * prefixOverrides：前缀覆盖掉（去掉）
      * suffixOverrides：后缀覆盖掉（去掉）-->
    <select id="selectByMultiConditionWithTrim" resultMap="ClazzAndStudentsResultMap">
        SELECT *
        FROM t_car
        <trim prefix="where" prefixOverrides="" suffix="" suffixOverrides="and | or">
            <if test="brand !=null and brand !=''">
                brand like "%${brand}%" and
            </if>
            <if test="guidePrice !=null and guidePrice !=''">
                guide_price >= #{guidePrice} and
            </if>
            <if test="carType !=null and carType!=''">
                car_type = #{carType}
            </if>

        </trim>
    </select>
    <!--12.4 set标签
    主要使用在update语句当中，用来生成set关键字，同时去掉最后多余的“,”
    比如我们只更新提交的不为空的字段，如果提交的数据是空或者""，那么这个字段我们将不更新。-->
    <!--UPDATE `t_car` set brand="奔驰V600",guide_price =9999 WHERE id = 165-->
    <update id="updateWithSet" parameterType="Car">
        <if test="id !=null and id!=''">
            update t_car
        </if>

        <set>
            <if test="carNum !=null and carNum != ''">
                car_num = #{carNum} ,
            </if>
            <if test="brand !=null and brand != ''">
                brand = #{brand} ,
            </if>
            <if test="guidePrice !=null and guidePrice != ''">
                guide_price = #{guidePrice} ,
            </if>
            <if test="produceTime !=null and produceTime != ''">
                produce_time = #{produceTime} ,
            </if>
            <if test="carType !=null and carType != ''">
                car_type = #{carType} ,
            </if>
        </set>
        <where>
            <if test="id !=null and id!=''">
                id = #{id}
            </if>
        </where>
    </update>

    <!-- /**
     * 只有一个分支会被选择！！！！ 如果前面执行了 就不会执行后面的
     * 需求：先根据品牌查询，如果没有提供品牌，再根据指导价格查询，如果没有提供指导价格，就根据生产日期查询。
     * 使用choose when otherwise标签查询
     * @param brand
     * @param guidePrice
     * @param produceTime
     * @return
     <choose>
  <when></when>
  <when></when>
  <when></when>
  <otherwise></otherwise>
</choose>
     */
     List<Car> selectWithChoose(@Param("brand") String brand, @Param("guidePrice") Double guidePrice, @Param("produceTime") String produceTime);
 -->
    <select id="selectWithChoose" resultType="Car">
        SELECT *
        FROM t_car
        <where>
            <choose>
                <when test="brand !=null and brand !=''">
                    brand = #{brand}
                </when>
                <when test="guidePrice !=null and guidePrice != ''">
                    guide_price >= #{guidePrice}
                </when>
                <otherwise>produce_time = #{produceTime}</otherwise>
            </choose>
        </where>
    </select>

    <!--  /**
      * 通过foreach完成批量删除
      * @param ids
      * @return
      */
      int deleteBatchByForeach(@Param("ids") Long[] ids);
       DELETE FROM t_car WHERE id in (166,167)
       collection：集合或数组
       item：集合或数组中的元素
       separator：分隔符
       open：foreach标签中所有内容的开始
       close：foreach标签中所有内容的结束-->
    <delete id="deleteBatchByForeach">
        delete from t_car
        where id in
        <foreach collection="ids" close=")" open="(" item="id" separator=",">
            #{id}
        </foreach>
    </delete>
    <!--  通过foreach完成批量添加 int addBatchByForeach(@Param("carList") List<Car> carList);
      insert into t_car values
      (null,'1001','凯美瑞',35.0,'2010-10-11','燃油车'),
      (null,'1002','比亚迪唐',31.0,'2020-11-11','新能源'),
      (null,'1003','比亚迪宋',32.0,'2020-10-11','新能源')
       collection：集合或数组
       item：集合或数组中的元素
       separator：分隔符
       open：foreach标签中所有内容的开始
       close：foreach标签中所有内容的结束  -->
    <insert id="addBatchByForeach" parameterType="Car">
        insert into t_car values
        <foreach collection="carList" separator="," item="car" open="" close="">
            (null, #{car.carNum},#{car.brand},#{car.guidePrice},#{car.produceTime},#{car.carType})
        </foreach>
    </insert>
</mapper>